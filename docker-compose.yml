services:
#  linear_predict_scheduler:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    command: python3 -m scripts.linear_predict_scheduler
#    ports:
#      - "5001:5001"
#    volumes:
#      - .:/app
#      - ./app/db:/app/db
#      - ./model/saved_models:/app/model/saved_models
#    networks:
#      - stocknet
#    environment:
#      - FLASK_ENV=development
#      - PYTHONPATH=/app
#      - FLASK_PORT=5001
#    depends_on:
#      - prediction_service
#
#  prediction_service:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    command: python3 -m app.services.prediction_service
#    ports:
#      - "5002:5002"
#    volumes:
#      - .:/app
#      - ./app/db:/app/db
#      - ./model/saved_models:/app/model/saved_models
#    networks:
#      - stocknet
#    environment:
#      - FLASK_ENV=development
#      - PYTHONPATH=/app
#      - FLASK_PORT=5002

  predict_main:
    build:
      context: .
      dockerfile: Dockerfile
    command: python3 -m app.main
    network_mode: "host"  # This will make the service accessible on host network
    volumes:
      - .:/app
      - ./app/db:/app/db
      - ./app/templates:/app/templates
      - ./model/saved_models:/app/model/saved_models
    environment:
      - FLASK_ENV=development
      - PYTHONPATH=/app
      - FLASK_PORT=5005
    restart: unless-stopped

  model_monitor:
    build:
      context: .
      dockerfile: Dockerfile
    command: python3 -m scripts.model_monitor_scheduler
    volumes:
      - .:/app
      - ./app/db:/app/db
      - ./model/saved_models:/app/model/saved_models
    network_mode: "host"  # Using host network mode for consistency
    environment:
      - FLASK_ENV=development
      - PYTHONPATH=/app
      - TZ=Asia/Kolkata
    depends_on:
      - predict_main
    restart: unless-stopped

networks:
  stocknet:
    driver: bridge
